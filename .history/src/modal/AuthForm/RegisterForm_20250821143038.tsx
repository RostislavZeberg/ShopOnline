import React, { useState, type FC } from 'react';
import { IMaskInput } from 'react-imask';

import { useRegisterForm } from '@/hooks/useRegisterForm';
import { useLocalStorageAccount } from '@/hooks/useLocalStorageAccount';
import { RegistrationFormData, registrationSchema } from '@/utils/validationAccountSchema';
import { useAppDispatch } from '@/store/hooks';
import { toggleAuthForm } from '@/store/slices/authFormSlice';
import { toggleBackground } from '@/store/slices/backgroundSlice';
import { toggleEnterLogIn } from '@/store/slices/logInSlice';
import styles from "./autorisation.module.scss"

interface RegisterFormProps {
  setAuthType: (authType: boolean) => void;
}

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
const initialFormData: RegistrationFormData = {
  firstName: '',
  lastName: '',
  phone: '',
  email: '',
  password: '',
  confirmPassword: '',
};

export const RegisterForm: FC<RegisterFormProps> = ({ setAuthType }) => {
  const dispatch = useAppDispatch();
  const [showForm, setShowForm] = useState(true)
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const { formData, errors, setFieldValue, handleChange, validateForm, setFormData } = useRegisterForm<RegistrationFormData>(
    initialFormData,
    registrationSchema
  );

  const [userData, setUserData] = useLocalStorageAccount<RegistrationFormData>('userData', {
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    password: '',
    confirmPassword: '',
  });

  const handlerShowForm = () => {
    setShowForm(false)
    setAuthType(true)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setShowForm(true)

    if (validateForm()) {
      setUserData(formData);
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
      dispatch(toggleAuthForm())
      dispatch(toggleBackground())
      dispatch(toggleEnterLogIn())
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IMaskInput
  const handlePhoneAccept = (value: string) => {
    setFieldValue('phone', value);
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  const existingEmail = userData && typeof userData === 'object' && 'email' in userData
    ? userData.email
    : null;

  if (formData.email === existingEmail && showForm) {
    return (
      <div className="">
        <p className="">–ê–∫–∫–∞—É–Ω—Ç —Å E-mail {existingEmail} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
        <button onClick={handlerShowForm}>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</button>
        <button onClick={() => {
          setShowForm(false);
          setFormData(prev => ({ ...prev, email: '' }));
        }}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        </button>
      </div>
    )
  }

  return (
    <form className={styles.form} onSubmit={handleSubmit}>
      <h2>C–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h2>
      <div className={styles['form__item']}>
        <input
          className={styles['form__input']}
          type="text"
          name="firstName"
          value={formData.firstName}
          onChange={handleChange}
          placeholder="–ò–º—è"
        />
        {errors.firstName && <p className={styles['error-text']}>{errors.firstName}</p>}
      </div>
      <div className={styles['form__item']}>
        <input
          className={styles['form__input']}
          type="text"
          name="lastName"
          value={formData.lastName}
          onChange={handleChange}
          placeholder="–§–∞–º–∏–ª–∏—è"
        />
        {errors.lastName && <p className={styles['error-text']}>{errors.lastName}</p>}
      </div>
      <div className={styles['form__item']}>
        <IMaskInput
          className={styles['form__input']}
          mask="+7-000-000-0000"
          name="phone"
          value={formData.phone}
          onAccept={handlePhoneAccept}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
        />
        {errors.phone && <p className={styles['error-text']}>{errors.phone}</p>}
      </div>
      <div className={styles['form__item']}>
        <input
          className={styles['form__input']}
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          placeholder="Email"
          autoComplete="email"
        />
        {errors.email && <p className={styles['error-text']}>{errors.email}</p>}
      </div>
      <div className={styles['form__item']}>
        <input
          className={styles['form__input']}
          type={showPassword ? "text" : "password"}
          name="password"
          value={formData.password}
          onChange={handleChange}
          placeholder="–ü–∞—Ä–æ–ª—å"
          autoComplete="new-password"
          style={{ paddingRight: '40px' }}
        />
        <span
          style={{
            position: 'absolute',
            right: '10px',
            top: '50%',
            transform: 'translateY(-50%)',
            cursor: 'pointer',
            userSelect: 'none'
          }}
          onClick={() => setShowPassword(!showPassword)}
        >
          {showPassword ? 'üôà' : 'üëÅ'}
        </span>
        {errors.password && <p className={styles['error-text']}>{errors.password}</p>}
      </div>
      <div className={styles['form__item']}>
        <input
          className={styles['form__input']}
          type={showConfirmPassword ? "text" : "password"}
          name="confirmPassword"
          value={formData.confirmPassword}
          onChange={handleChange}
          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          autoComplete="new-password"
          style={{ paddingRight: '40px' }}
        />
        <span
          style={{
            position: 'absolute',
            right: '10px',
            top: '50%',
            transform: 'translateY(-50%)',
            cursor: 'pointer',
            userSelect: 'none'
          }}
          onClick={() => setShowConfirmPassword(!showConfirmPassword)}
        >
          {showConfirmPassword ? 'üôà' : 'üëÅ'}
        </span>
        {errors.confirmPassword && <p className={styles['error-text']}>{errors.confirmPassword}</p>}
      </div>
      <div className={`${styles['form__item']} ${styles['form__btn-block']}`}>
        <button
          type="submit"
          className="btn btn-reset"
        >
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>
        <button
          onClick={() => setAuthType(true)}
          type="button"
          className="btn btn-reset"
        >
          –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </button>
      </div>
    </form>
  );
}